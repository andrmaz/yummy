{"version":3,"sources":["theme.js","components/Header.js","config.js","components/SearchInputs.js","components/ListItems.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","Header","useColorMode","colorMode","toggleColorMode","d","justifyContent","pt","onClick","as","FaUserCircle","dotenv","silent","SearchInput","handleChange","useForm","mode","reValidateMode","defaultValues","input","to","diet","health","control","handleSubmit","watch","errors","onSubmit","e","a","preventDefault","uri","process","fetch","method","headers","response","json","data","console","log","Error","message","h","color","minW","maxW","m","size","name","rules","required","defaultValue","render","onChange","value","id","pr","type","variant","placeholder","isRequired","errorBorderColor","isInvalid","width","colorScheme","isDisabled","length","textAlign","fontStyle","mb","justify","align","w","focusBorderColor","label","CardItem","lazy","areEqual","prevProps","nextProps","ListItems","results","fallback","thickness","speed","emptyColor","pos","top","left","minChildWidth","spacing","count","hits","map","index","recipe","status","memo","App","props","bind","state","this","setState","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","URL","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4e5dde7c.chunk.js","sourcesContent":["// 1. import `extendTheme` function\nimport { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;","import React from 'react';\nimport { Button, useColorMode, Icon, Heading } from '@chakra-ui/react';\nimport { FaUserCircle } from 'react-icons/fa';\n\nfunction Header() {\n\n    const { colorMode, toggleColorMode } = useColorMode();\n    \n    return (\n        <Heading d='flex' justifyContent='space-between' pt='10px'>\n          {/* Switch light and dark mode */}\n          <Button onClick={toggleColorMode} >\n            Toggle {colorMode === 'light' ? 'Dark' : 'Light'}\n          </Button>\n          <Icon as={FaUserCircle} />\n        </Heading>\n    );\n};\n\nexport default Header;\n","import dotenv from 'dotenv';\ndotenv.config({ silent: true });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm, Controller } from 'react-hook-form';\nimport { \n    Center,\n    InputGroup, \n    Input, \n    InputRightElement, \n    Button, \n    Flex, \n    FormControl, \n    Select,\n    FormHelperText,\n    useColorMode,\n} from '@chakra-ui/react';\n// import dotenv configuration file\nimport '../config';\n\nconst app_id = process.env.REACT_APP_ID;\nconst app_key = process.env.REACT_APP_KEY;\n\nconst SearchInput = ({ handleChange }) => {\n\n    // To manage color mode chakra exposes the useColorMode\n    const { colorMode } = useColorMode();\n\n    const { control, handleSubmit, watch, errors } = useForm({\n\t\tmode: 'onChange',\n        reValidateMode: 'onChange',\n        defaultValues: {\n            input: '',\n            to: 4,\n            diet: 'balanced',\n            health: 'tree-nut-free',\n        }\n    });\n\n    const { input, to, diet, health }  = watch();\n\n    const onSubmit = async(e) => {\n        e.preventDefault();\n        try {\n            const uri = `https://api.edamam.com/search?q=${input}&app_id=${app_id}&app_key=${app_key}&from=0&to=${to}&diet=${diet}&health=${health}`;\n            const response = await fetch(uri, {\n                method: 'GET',\n                headers: {\n                    'Content-Encoding': 'gzip',\n                    'Cache-Control': 'no-cache'\n                }\n            });\n            const data = await response.json();\n            if (typeof data !== 'string'){\n                handleChange(data);\n            }\n            console.log(data);\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    };\n\n    return (\n        <Center h=\"20vh\" color={colorMode === 'light' ? 'black' : 'white'} minW='300px' maxW='500px' m='auto'>\n            <FormControl onSubmit={handleSubmit(onSubmit)}>\n                <InputGroup size='md'>\n                    <Controller\n                        name=\"input\"\n                        control={control}\n                        rules={{ required: true }}\n                        defaultValue=\"\"\n                        render={({ onChange, value }) => \n                            <Input \n                                id='input'\n                                onChange={onChange} \n                                value={value} \n                                name='input'\n                                pr='4.5rem'\n                                type='text'\n                                variant='outline'\n                                placeholder='Enter an ingredient'\n                                isRequired={true}\n                                errorBorderColor ='red.500'\n                                isInvalid={errors.input ? true : false}\n                            />\n                        }\n                    />\n                    <InputRightElement width='4.5rem'>\n                        <Button \n                            h='1.75rem' \n                            size='sm'\n                            variant='solid'\n                            colorScheme='blue'\n                            isDisabled={input.length < 2 ? true : false}\n                            onClick={onSubmit}\n                        >\n                            Search\n                        </Button>\n                    </InputRightElement>\n                </InputGroup>\n                <FormHelperText textAlign='center' fontStyle='oblique' mb='0.5rem'>\n                    Select the number of recipies, the diet and the type of meal\n                </FormHelperText>\n                <Flex justify='space-around' align='center'>\n                    <Controller\n                        name=\"to\"\n                        control={control}\n                        defaultValue={4}\n                        render={({ onChange, value }) => \n                            <Select \n                                id='to'\n                                onChange={onChange} \n                                value={value} \n                                name='to'\n                                size='xs' \n                                w='200px'\n                                focusBorderColor='blue.500'\n                            >\n                                <option label={2} value={2} />\n                                <option label={3} value={3} />\n                                <option label={4} value={4} />\n                                <option label={5} value={5} />\n                                <option label={6} value={6} />\n                            </Select>\n                        }\n                    />\n                    <Controller\n                        name=\"diet\"\n                        control={control}\n                        defaultValue='balanced'\n                        render={({ onChange, value }) => \n                        <Select \n                            id='diet'\n                            onChange={onChange} \n                            value={value} \n                            name='diet'\n                            size='xs' \n                            w='200px'\n                            focusBorderColor='blue.500'\n                        >\n                            <option label='balanced' value='balanced' />\n                            <option label='high-protein' value='high-protein' />\n                            <option label='high-fiber' value='high-fiber' />\n                            <option label='low-fat' value='low-fat' />\n                            <option label='low-carb' value='low-carb' />\n                        </Select>\n                        }\n                    />\n                    <Controller\n                        name=\"health\"\n                        control={control}\n                        defaultValue='tree-nut-free'\n                        render={({ onChange, value }) => \n                        <Select \n                            id='health'\n                            onChange={onChange} \n                            value={value} \n                            name='health'\n                            size='xs' \n                            w='200px'\n                            focusBorderColor='blue.500'\n                        >\n                            <option label='tree-nut-free' value='tree-nut-free' />\n                            <option label='peanut-free' value='peanut-free' />\n                            <option label='vegetarian' value='vegetarian' />\n                        </Select>\n                        }\n                    />\n                </Flex>\n            </FormControl>\n        </Center>\n    );\n};\n\nSearchInput.propTypes = {\n    handleChange: PropTypes.func,\n};\n\nexport default SearchInput;\n","import React, { lazy, memo, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { SimpleGrid, Alert, AlertIcon, Spinner } from '@chakra-ui/react';\n\nconst CardItem = lazy(() => import('./CardItem'));\n\n// Check on props change\nfunction areEqual(prevProps, nextProps){\n    if (prevProps === nextProps) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst ListItems = ({ results }) => (\n    <Suspense  \n        fallback={\n        <Spinner\n            label='Loading'\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"xl\"\n            pos='absolute'\n            top='50%'\n            left='50%'\n        />\n        }\n    >\n        <SimpleGrid minChildWidth=\"300px\" spacing=\"5px\">\n            {\n                !results ?\n                <Alert status=\"info\">\n                    <AlertIcon />\n                    Welcome to Yummy. Let&apos;s start searching!\n                </Alert> :\n                (\n                    results?.count > 0 ?\n                    results.hits.map(({recipe}, index) => (\n                        <CardItem key={index} recipe={recipe} />\n                    )) : \n                    <Alert status=\"warning\">\n                        <AlertIcon />\n                        No items were found matching your search request .. Please retry\n                    </Alert>\n                )\n            }\n        </SimpleGrid>\n    </Suspense>\n);\n\nListItems.propTypes = {\n    results: PropTypes.object\n};\n\nexport default memo(ListItems, areEqual);","import React, { Component } from 'react';\nimport { Container} from '@chakra-ui/react';\nimport Header from './components/Header';\nimport SearchInput from './components/SearchInputs';\nimport ListItems from './components/ListItems';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      results : null,\n    };\n  }\n\n  handleChange(data) {\n    this.setState({ results: data });\n  };\n\n  render(){\n    return (\n      <Container h='100vh' maxW='1200px' mb='10vh'>\n        <Header />\n        <SearchInput \n          handleChange={this.handleChange}\n        />\n        <ListItems \n          results={this.state.results}\n        />\n      </Container>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport theme from './theme';\nimport App from './App';\n// 1. import `ChakraProvider` component\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}