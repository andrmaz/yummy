{"version":3,"sources":["theme.js","components/Header.js","api/apiCall.js","components/SelectRecipes.js","components/SelectDiet.js","components/SelectHealth.js","config.js","components/SearchInput.js","components/FormFields.js","components/ListItems.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","Header","useColorMode","colorMode","toggleColorMode","d","justifyContent","pt","data-testid","onClick","as","FaUserCircle","apiCall","link","params","a","fetch","response","json","data","SelectRecipes","control","name","defaultValue","render","onChange","value","direction","textAlign","id","size","w","m","variant","focusBorderColor","label","SelectDiet","SelectHealth","dotenv","silent","SearchInput","errors","rules","required","pr","type","placeholder","isRequired","errorBorderColor","isInvalid","input","FormFields","onSearch","useForm","mode","reValidateMode","defaultValues","to","diet","health","handleSubmit","watch","onSubmit","options","method","headers","uri","process","Error","message","h","color","minW","maxW","width","colorScheme","isDisabled","length","justify","CardItem","lazy","areEqual","prevProps","nextProps","ListItems","results","fallback","thickness","speed","emptyColor","pos","top","left","minChildWidth","spacing","count","hits","map","index","recipe","status","memo","App","props","bind","state","this","setState","mb","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","URL","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d72e5ef3.chunk.js","sourcesContent":["// 1. import `extendTheme` function\nimport { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;","import React from 'react';\nimport { Button, useColorMode, Icon, Heading } from '@chakra-ui/react';\nimport { FaUserCircle } from 'react-icons/fa';\n\nfunction Header() {\n\n    const { colorMode, toggleColorMode } = useColorMode();\n    \n    return (\n        <Heading d='flex' justifyContent='space-between' pt='10px'>\n          {/* Switch light and dark mode */}\n          <Button data-testid=\"toggle\" onClick={toggleColorMode} >\n            Toggle {colorMode === 'light' ? 'Dark' : 'Light'}\n          </Button>\n          <Icon as={FaUserCircle} />\n        </Heading>\n    );\n};\n\nexport default Header;\n","export const apiCall = async(link, params) => {\r\n    const response = await fetch(link, params);\r\n    const data = await response.json();\r\n    return data;\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport { Flex, FormLabel, Select} from '@chakra-ui/react';\r\n\r\nconst SelectRecipes = ({ control }) => {\r\n    return (\r\n        <Controller\r\n            name=\"to\"\r\n            data-testid='b'\r\n            control={control}\r\n            defaultValue={4}\r\n            render={({ onChange, value }) =>\r\n                <Flex direction='column'> \r\n                    <FormLabel textAlign='center' pt='5px' >Recipes</FormLabel>\r\n                    <Select \r\n                        id='to'\r\n                        onChange={onChange} \r\n                        value={value} \r\n                        name='to'\r\n                        size='xs' \r\n                        w='200px'\r\n                        m='5px'\r\n                        variant=\"filled\"\r\n                        focusBorderColor='blue.500'\r\n                    >\r\n                        <option label={2} value={2} />\r\n                        <option label={3} value={3} />\r\n                        <option label={4} value={4} />\r\n                        <option label={5} value={5} />\r\n                        <option label={6} value={6} />\r\n                    </Select>\r\n                </Flex>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nSelectRecipes.propTypes = {\r\n    control: PropTypes.object,\r\n};\r\n\r\nexport default SelectRecipes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport { Flex, FormLabel, Select} from '@chakra-ui/react';\r\n\r\nconst SelectDiet = ({ control }) => {\r\n    return (\r\n        <Controller\r\n            name=\"diet\"\r\n            data-testid='c'\r\n            control={control}\r\n            defaultValue='balanced'\r\n            render={({ onChange, value }) => \r\n            <Flex direction='column'>\r\n                <FormLabel textAlign='center' pt='5px' >Diet</FormLabel>\r\n                <Select \r\n                    id='diet'\r\n                    onChange={onChange} \r\n                    value={value} \r\n                    name='diet'\r\n                    size='xs' \r\n                    w='200px'\r\n                    m='5px'\r\n                    variant=\"filled\"\r\n                    focusBorderColor='blue.500'\r\n                >\r\n                    <option label='balanced' value='balanced' />\r\n                    <option label='high-protein' value='high-protein' />\r\n                    <option label='high-fiber' value='high-fiber' />\r\n                    <option label='low-fat' value='low-fat' />\r\n                    <option label='low-carb' value='low-carb' />\r\n                </Select>\r\n            </Flex>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nSelectDiet.propTypes = {\r\n    control: PropTypes.object,\r\n};\r\n\r\nexport default SelectDiet;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport { Flex, FormLabel, Select} from '@chakra-ui/react';\r\n\r\nconst SelectHealth = ({ control }) => {\r\n    return (\r\n        <Controller\r\n            name=\"health\"\r\n            data-testid='d'\r\n            control={control}\r\n            defaultValue='tree-nut-free'\r\n            render={({ onChange, value }) => \r\n            <Flex direction='column'>\r\n                <FormLabel textAlign='center' pt='5px' >Health</FormLabel>\r\n                <Select \r\n                    id='health'\r\n                    onChange={onChange} \r\n                    value={value} \r\n                    name='health'\r\n                    size='xs' \r\n                    w='200px'\r\n                    m='5px'\r\n                    variant=\"filled\"\r\n                    focusBorderColor='blue.500'\r\n                >\r\n                    <option label='tree-nut-free' value='tree-nut-free' />\r\n                    <option label='peanut-free' value='peanut-free' />\r\n                    <option label='vegetarian' value='vegetarian' />\r\n                </Select>\r\n            </Flex>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nSelectHealth.propTypes = {\r\n    control: PropTypes.object,\r\n};\r\n\r\nexport default SelectHealth;\r\n","import dotenv from 'dotenv';\ndotenv.config({ silent: true });\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport { Input } from '@chakra-ui/react';\r\n\r\nconst SearchInput = ({ control, errors }) => {\r\n    return (\r\n        <Controller\r\n            name=\"input\"\r\n            data-testid=\"a\"\r\n            control={control}\r\n            rules={{ required: true }}\r\n            defaultValue=\"\"\r\n            render={({ onChange, value }) => \r\n                <Input \r\n                    id='input'\r\n                    onChange={onChange} \r\n                    value={value} \r\n                    name='input'\r\n                    pr='4.5rem'\r\n                    type='text'\r\n                    variant='outline'\r\n                    placeholder='Enter an ingredient'\r\n                    isRequired={true}\r\n                    errorBorderColor ='red.500'\r\n                    isInvalid={errors.input ? true : false}\r\n                />\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nSearchInput.propTypes = {\r\n    control: PropTypes.object,\r\n    errors: PropTypes.object,\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { apiCall } from '../api/apiCall';\nimport SelectRecipes from './SelectRecipes';\nimport SelectDiet from './SelectDiet';\nimport SelectHealth from './SelectHealth';\nimport { \n    Center,\n    InputGroup, \n    InputRightElement, \n    Button, \n    Flex, \n    FormControl, \n    useColorMode,\n} from '@chakra-ui/react';\n// import dotenv configuration file\nimport '../config';\nimport SearchInput from './SearchInput';\n\n\nconst app_id = process.env.REACT_APP_ID;\nconst app_key = process.env.REACT_APP_KEY;\n\n\nconst FormFields = ({ onSearch }) => {\n\n    // To manage color mode chakra exposes the useColorMode\n    const { colorMode } = useColorMode();\n\n    const { control, handleSubmit, watch, errors } = useForm({\n\t\tmode: 'onChange',\n        reValidateMode: 'onChange',\n        defaultValues: {\n            input: '',\n            to: 4,\n            diet: 'balanced',\n            health: 'tree-nut-free',\n        }\n    });\n\n    // Check on props change\n    const { input, to, diet, health }  = watch();\n\n    \n    const onSubmit = async () => {\n        try {\n            const options = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Content-Encoding': 'gzip',\n                    'Cache-Control': 'no-cache'\n                }\n            };\n            const uri = `https://api.edamam.com/search?q=${input}&app_id=${app_id}&app_key=${app_key}&from=0&to=${to}&diet=${diet}&health=${health}`;\n            const data = await apiCall(uri, options);\n            // if no data match the search request, return an object with count 0\n            onSearch(data);\n        } catch (error) {\n            throw new Error(error.message);\n        }\n    };\n\n    return (\n        <Center h=\"20vh\" color={colorMode === 'light' ? 'black' : 'white'} minW='300px' maxW='500px' m='auto'>\n            <FormControl onSubmit={handleSubmit(onSubmit)} isRequired='true' >\n                <InputGroup size='md'>\n                    <SearchInput control={control} errors={errors} />\n                    <InputRightElement width='4.5rem'>\n                        <Button \n                            id='button'\n                            h='1.75rem' \n                            size='sm'\n                            variant='solid'\n                            colorScheme='blue'\n                            isDisabled={input.length < 2 ? true : false}\n                            onClick={onSubmit}\n                        >\n                            Search\n                        </Button>\n                    </InputRightElement>\n                </InputGroup>\n                <Flex justify='space-around'>\n                    <SelectRecipes control={control} />\n                    <SelectDiet control={control} />\n                    <SelectHealth control={control} />\n                </Flex>\n            </FormControl>\n        </Center>\n    );\n};\n\nFormFields.propTypes = {\n    onSearch: PropTypes.func,\n};\n\nexport default FormFields;\n","import React, { lazy, memo, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { SimpleGrid, Alert, AlertIcon, Spinner } from '@chakra-ui/react';\n\nconst CardItem = lazy(() => import('./CardItem'));\n\n// Check on props change\nexport function areEqual(prevProps, nextProps){\n    if (prevProps === nextProps) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst ListItems = ({ results }) => (\n    <Suspense  \n        fallback={\n        <Spinner\n            label='Loading'\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"xl\"\n            pos='absolute'\n            top='50%'\n            left='50%'\n        />\n        }\n    >\n        <SimpleGrid minChildWidth=\"300px\" spacing=\"5px\">\n            {\n                !results ?\n                <Alert status=\"info\">\n                    <AlertIcon />\n                    Welcome to Yummy. Let&apos;s start searching!\n                </Alert> :\n                (\n                    results?.count > 0 ?\n                    results.hits.map(({recipe}, index) => (\n                        <CardItem key={index} recipe={recipe} />\n                    )) : \n                    <Alert status=\"warning\">\n                        <AlertIcon />\n                        No items were found matching your search request .. Please retry\n                    </Alert>\n                )\n            }\n        </SimpleGrid>\n    </Suspense>\n);\n\nListItems.propTypes = {\n    results: PropTypes.object\n};\n\nexport default memo(ListItems, areEqual);","import React, { Component } from 'react';\nimport { Container} from '@chakra-ui/react';\nimport Header from './components/Header';\nimport FormFields from './components/FormFields';\nimport ListItems from './components/ListItems';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onSearch = this.onSearch.bind(this);\n    this.state = { results : null };\n  }\n\n  onSearch(data) {\n    this.setState({ results: data });\n  };\n\n  render(){\n    const { results } = this.state;\n    return (\n      <Container h='100vh' maxW='1200px' mb='10vh'>\n        <Header />\n        <FormFields\n          onSearch={this.onSearch}\n        />\n        <ListItems \n          results={results}\n        />\n      </Container>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport theme from './theme';\nimport App from './App';\n// 1. import `ChakraProvider` component\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}