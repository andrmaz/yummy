{"version":3,"sources":["../../../src/box.tsx","../../../src/image.tsx","../../../src/use-image.ts","../../../src/badge.tsx","../../../src/list.tsx","components/CardItem.js"],"names":["Box","chakra","Square","forwardRef","centerContent","styles","display","alignItems","justifyContent","ref","boxSize","__css","flexShrink","flexGrow","Circle","size","borderRadius","NativeImage","alt","width","height","Image","crossOrigin","shouldIgnore","loading","status","props","ignoreFallback","useState","useEffect","setStatus","src","imageRef","useRef","load","useCallback","flush","img","event","onLoad","error","onError","srcSet","sizes","useSafeLayoutEffect","useImage","shared","objectFit","objectPosition","align","rest","omit","as","className","fallbackSrc","Badge","useStyleConfig","omitThemingProps","cx","whiteSpace","verticalAlign","List","useMultiStyleConfig","styleType","spacing","validChildren","getValidChildren","spacingStyle","mt","value","listStyleType","listStylePosition","stylePosition","role","OrderedList","marginLeft","UnorderedList","ListItem","useStyles","item","ListIcon","icon","areEqual","prevProps","nextProps","CardItem","recipe","colorMode","useColorMode","borderWidth","overflow","bgColor","image","m","p","d","px","colorScheme","dietLabels","color","fontWeight","letterSpacing","fontSize","textTransform","ml","totalTime","calories","toFixed","lineHeight","isTruncated","label","ingredientLines","map","ingredient","index","memo"],"mappings":"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","file":"static/js/3.54cb4fd0.chunk.js","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/docs/layout/box\n */\nexport const Box = chakra(\"div\")\n\nif (__DEV__) {\n  Box.displayName = \"Box\"\n}\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  Square.displayName = \"Square\"\n}\n\nexport const Circle = forwardRef<SquareProps, \"div\">((props, ref) => {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n","import {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useImage, UseImageProps } from \"./use-image\"\n\ninterface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nconst NativeImage = React.forwardRef(\n  (props: NativeImageProps, ref: React.Ref<any>) => {\n    const { htmlWidth, htmlHeight, alt, ...rest } = props\n    return (\n      <img\n        width={htmlWidth}\n        height={htmlHeight}\n        ref={ref}\n        alt={alt}\n        {...rest}\n      />\n    )\n  },\n)\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/docs/data-display/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    ...rest\n  } = props\n\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n  const shouldIgnore = loading != null || ignoreFallback\n\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnore,\n  })\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nexport interface ImgProps extends HTMLChakraProps<\"img\">, NativeImageOptions {}\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport const Img = forwardRef<ImgProps, \"img\">((props, ref) => (\n  <chakra.img ref={ref} as={NativeImage} className=\"chakra-image\" {...props} />\n))\n\nif (__DEV__) {\n  Image.displayName = \"Image\"\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  ImgHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?(event: React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?(error: string | React.SyntheticEvent<HTMLImageElement, Event>): void\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: ImgHTMLAttributes<any>[\"crossOrigin\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet\n    }\n\n    if (sizes) {\n      img.sizes = sizes\n    }\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.((event as unknown) as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface BadgeProps extends HTMLChakraProps<\"span\">, ThemingProps {}\n\n/**\n * React component used to display notifications, messages, or\n * statuses in different shapes and sizes.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/badge\n */\nexport const Badge = forwardRef<BadgeProps, \"span\">((props, ref) => {\n  const styles = useStyleConfig(\"Badge\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.span\n      ref={ref}\n      className={cx(\"chakra-badge\", props.className)}\n      {...rest}\n      __css={{\n        display: \"inline-block\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  Badge.displayName = \"Badge\"\n}\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  StylesProvider,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface ListOptions {\n  /**\n   * Short hand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Short hand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/list\n */\nexport const List = forwardRef<ListProps, \"ul\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </StylesProvider>\n  )\n})\n\nif (__DEV__) {\n  List.displayName = \"List\"\n}\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginLeft=\"1em\" {...rest} />\n  )\n})\n\nif (__DEV__) {\n  OrderedList.displayName = \"OrderedList\"\n}\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginLeft=\"1em\" {...rest} />\n  )\n})\n\nif (__DEV__) {\n  UnorderedList.displayName = \"UnorderedList\"\n}\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">((props, ref) => {\n  const styles = useStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nif (__DEV__) {\n  ListItem.displayName = \"ListItem\"\n}\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nif (__DEV__) {\n  ListIcon.displayName = \"ListIcon\"\n}\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Image, Badge, List, ListItem, useColorMode } from '@chakra-ui/react';\n\n// Check on props change\nexport function areEqual(prevProps, nextProps){\n    if (prevProps === nextProps) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst CardItem = ({ recipe }) => {\n\n    // To manage color mode chakra exposes the useColorMode\n    const { colorMode } = useColorMode();\n\n    return (\n        <Box borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" bgColor={colorMode === 'light' ? 'royalblue' : 'unset'}>\n            <Image src={recipe.image} alt='Recipe' m='auto' />\n\n            <Box p=\"6\">\n                <Box d=\"flex\" alignItems=\"baseline\">\n                <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\n                    {recipe.dietLabels[0]}\n                </Badge>\n                <Box\n                    color=\"gray.500\"\n                    fontWeight=\"semibold\"\n                    letterSpacing=\"wide\"\n                    fontSize=\"xs\"\n                    textTransform=\"uppercase\"\n                    ml=\"2\"\n                >\n                    {recipe.totalTime} minutes &bull; {recipe.calories.toFixed(0)} cal\n                </Box>\n                </Box>\n\n                <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h4\"\n                lineHeight=\"tight\"\n                isTruncated\n                >\n                {recipe.label}\n                </Box>\n\n                <List>\n                    {\n                        recipe.ingredientLines.map((ingredient, index) => (\n                            <ListItem key={index}>\n                                {ingredient}\n                            </ListItem>\n                        ))\n                    }\n                </List>\n            </Box>\n        </Box>\n    );\n};\n\nCardItem.propTypes = {\n    recipe: PropTypes.object\n};\n\nexport default memo(CardItem, areEqual);"],"sourceRoot":""}